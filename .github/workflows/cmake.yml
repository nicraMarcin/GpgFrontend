name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  EXECUTABLE_OUTPUT_PATH: ./

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependence
      run: |
        sudo apt-get update
        sudo apt-get -y install build-essential binutils git autoconf automake
        sudo apt-get -y install gcc g++
        sudo apt-get -y install libgpgme-dev gpg

    - name: Install Qt
      uses: jurplel/install-qt-action@v2

    - name: Build GpgME
      run: |
        git clone https://github.com/gpg/gpgme
        cd gpgme
        ./autogen.sh
        ./configure && make -j2
        sudo make install
        cd ..

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DEXECUTABLE_OUTPUT_PATH=${{env.EXECUTABLE_OUTPUT_PATH}}

    - name: Build GpgFrontend
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}  -- -j 2

    - name: Upload Artifact
      uses: actions/upload-artifact@master
      with:
        name: gpgfrontend-linux
        path: ${{github.workspace}}/build/release/*
      
